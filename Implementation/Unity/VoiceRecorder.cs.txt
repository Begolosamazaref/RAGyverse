using UnityEngine;
using System.IO;
using UnityEngine.Networking;
using System.Collections;

public class VoiceRecorder : MonoBehaviour
{
    private AudioSource audioSource;
    private bool isRecording = false;
    private string microphoneDevice;
    private float recordingTime = 5f; // Record for 5 seconds

    void Start()
    {
        audioSource = GetComponent<AudioSource>();
        if (Microphone.devices.Length > 0)
        {
            microphoneDevice = Microphone.devices[0]; // Use the first microphone
        }
        else
        {
            Debug.LogError("No microphone detected!");
        }
    }

    void Update()
    {
        if (Input.GetKeyDown(KeyCode.R)) // Press 'R' to start recording
        {
            StartRecording();
        }
        if (Input.GetKeyUp(KeyCode.R)) // Release 'R' to stop recording
        {
            StopRecording();
        }
    }

    void StartRecording()
    {
        if (!isRecording && microphoneDevice != null)
        {
            isRecording = true;
            audioSource.clip = Microphone.Start(microphoneDevice, false, (int)recordingTime, 44100); // 44.1kHz
            Debug.Log("Recording started...");
        }
    }

    void StopRecording()
    {
        if (isRecording)
        {
            isRecording = false;
            Microphone.End(microphoneDevice);
            SaveAudioClip();
            Debug.Log("Recording stopped.");
        }
    }

    void SaveAudioClip()
    {
        var audioClip = audioSource.clip;
        if (audioClip != null)
        {
            string path = Path.Combine(Application.persistentDataPath, "question.wav");
            SavWav.Save(path, audioClip); // Ensure SavWav is implemented
            Debug.Log("Audio saved to: " + path);
            SendToBackend(path);
        }
    }

    void SendToBackend(string filePath)
    {
        StartCoroutine(UploadAudio(filePath));
    }

    System.Collections.IEnumerator UploadAudio(string filePath)
    {
        byte[] audioData = File.ReadAllBytes(filePath);
        WWWForm form = new WWWForm();
        form.AddBinaryData("file", audioData, "question.wav", "audio/wav");

        using (UnityWebRequest www = UnityWebRequest.Post("https://0071-34-82-240-112.ngrok-free.app//ask_audio", form))
        {
            yield return www.SendWebRequest();

            if (www.result == UnityWebRequest.Result.Success)
            {
                string jsonResponse = www.downloadHandler.text;
                Debug.Log("Backend response: " + jsonResponse);
                var response = JsonUtility.FromJson<BackendResponse>(jsonResponse);
                PlayResponse(response.answer, response.audio_url);
            }
            else
            {
                Debug.LogError("Error uploading audio: " + www.error);
            }
        }
    }

    void PlayResponse(string answer, string audioUrl)
    {
        Debug.Log("Answer: " + answer);
        Debug.Log("Audio URL: " + audioUrl);
        StartCoroutine(DownloadAndPlayAudio(audioUrl));
    }

    System.Collections.IEnumerator DownloadAndPlayAudio(string audioUrl)
    {
        string fullUrl = "https://0071-34-82-240-112.ngrok-free.app" + audioUrl;
        using (UnityWebRequest www = UnityWebRequestMultimedia.GetAudioClip(fullUrl, AudioType.MPEG))
        {
            yield return www.SendWebRequest();

            if (www.result == UnityWebRequest.Result.Success)
            {
                AudioClip responseClip = DownloadHandlerAudioClip.GetContent(www);
                audioSource.clip = responseClip;
                audioSource.Play();
                // Trigger uLipSync to analyze the clip
                uLipSync.uLipSync lipSync = GetComponent<uLipSync.uLipSync>(); // Correct namespace
                if (lipSync != null)
                {
                    lipSync.enabled = false;
                    // uLipSync relies on the Audio Source field in the Inspector
                    lipSync.enabled = true; // Re-enable to re-analyze
                }
            }
            else
            {
                Debug.LogError("Failed to download audio: " + www.error);
            }
        }
    }
}

[System.Serializable]
public class BackendResponse
{
    public string answer;
    public string audio_url;
}